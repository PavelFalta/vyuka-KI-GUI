/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EnrollmentCreate,
  EnrollmentResponse,
  EnrollmentResponseTasks,
  EnrollmentUpdate,
  HTTPValidationError,
} from '../models/index';
import {
    EnrollmentCreateFromJSON,
    EnrollmentCreateToJSON,
    EnrollmentResponseFromJSON,
    EnrollmentResponseToJSON,
    EnrollmentResponseTasksFromJSON,
    EnrollmentResponseTasksToJSON,
    EnrollmentUpdateFromJSON,
    EnrollmentUpdateToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CreateEnrollmentRequest {
    enrollmentCreate: EnrollmentCreate;
}

export interface DeleteEnrollmentRequest {
    enrollmentId: number;
}

export interface GetEnrollmentRequest {
    enrollmentId: number;
}

export interface GetTaskCompletionsForUserRequest {
    userId: number;
}

export interface UpdateEnrollmentRequest {
    enrollmentId: number;
    enrollmentUpdate: EnrollmentUpdate;
}

/**
 * 
 */
export class EnrollmentsApi extends runtime.BaseAPI {

    /**
     * Create a student course enrollment
     */
    async createEnrollmentRaw(requestParameters: CreateEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnrollmentResponse>> {
        if (requestParameters['enrollmentCreate'] == null) {
            throw new runtime.RequiredError(
                'enrollmentCreate',
                'Required parameter "enrollmentCreate" was null or undefined when calling createEnrollment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/enrollments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnrollmentCreateToJSON(requestParameters['enrollmentCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrollmentResponseFromJSON(jsonValue));
    }

    /**
     * Create a student course enrollment
     */
    async createEnrollment(requestParameters: CreateEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnrollmentResponse> {
        const response = await this.createEnrollmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a student course enrollment
     */
    async deleteEnrollmentRaw(requestParameters: DeleteEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['enrollmentId'] == null) {
            throw new runtime.RequiredError(
                'enrollmentId',
                'Required parameter "enrollmentId" was null or undefined when calling deleteEnrollment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/enrollments/{enrollment_id}`.replace(`{${"enrollment_id"}}`, encodeURIComponent(String(requestParameters['enrollmentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a student course enrollment
     */
    async deleteEnrollment(requestParameters: DeleteEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEnrollmentRaw(requestParameters, initOverrides);
    }

    /**
     * Get a student course enrollment
     */
    async getEnrollmentRaw(requestParameters: GetEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnrollmentResponse>> {
        if (requestParameters['enrollmentId'] == null) {
            throw new runtime.RequiredError(
                'enrollmentId',
                'Required parameter "enrollmentId" was null or undefined when calling getEnrollment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/enrollments/{enrollment_id}`.replace(`{${"enrollment_id"}}`, encodeURIComponent(String(requestParameters['enrollmentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrollmentResponseFromJSON(jsonValue));
    }

    /**
     * Get a student course enrollment
     */
    async getEnrollment(requestParameters: GetEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnrollmentResponse> {
        const response = await this.getEnrollmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all student course enrollments
     */
    async getEnrollmentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EnrollmentResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/enrollments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EnrollmentResponseFromJSON));
    }

    /**
     * Get all student course enrollments
     */
    async getEnrollments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EnrollmentResponse>> {
        const response = await this.getEnrollmentsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all task completions for a user
     */
    async getTaskCompletionsForUserRaw(requestParameters: GetTaskCompletionsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnrollmentResponseTasks>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getTaskCompletionsForUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/enrollments/{user_id}/task_completion`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrollmentResponseTasksFromJSON(jsonValue));
    }

    /**
     * Get all task completions for a user
     */
    async getTaskCompletionsForUser(requestParameters: GetTaskCompletionsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnrollmentResponseTasks> {
        const response = await this.getTaskCompletionsForUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a student course enrollment
     */
    async updateEnrollmentRaw(requestParameters: UpdateEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnrollmentResponse>> {
        if (requestParameters['enrollmentId'] == null) {
            throw new runtime.RequiredError(
                'enrollmentId',
                'Required parameter "enrollmentId" was null or undefined when calling updateEnrollment().'
            );
        }

        if (requestParameters['enrollmentUpdate'] == null) {
            throw new runtime.RequiredError(
                'enrollmentUpdate',
                'Required parameter "enrollmentUpdate" was null or undefined when calling updateEnrollment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/enrollments/{enrollment_id}`.replace(`{${"enrollment_id"}}`, encodeURIComponent(String(requestParameters['enrollmentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EnrollmentUpdateToJSON(requestParameters['enrollmentUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrollmentResponseFromJSON(jsonValue));
    }

    /**
     * Update a student course enrollment
     */
    async updateEnrollment(requestParameters: UpdateEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnrollmentResponse> {
        const response = await this.updateEnrollmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
