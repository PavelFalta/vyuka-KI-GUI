/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CourseCreate,
  CourseResponse,
  CourseUpdate,
  HTTPValidationError,
} from '../models/index';
import {
    CourseCreateFromJSON,
    CourseCreateToJSON,
    CourseResponseFromJSON,
    CourseResponseToJSON,
    CourseUpdateFromJSON,
    CourseUpdateToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CreateCoursesRequest {
    courseCreate: CourseCreate;
}

export interface DeleteCourseRequest {
    courseId: number;
}

export interface GetCourseRequest {
    courseId: number;
}

export interface UpdateCourseRequest {
    courseId: number;
    courseUpdate: CourseUpdate;
}

/**
 * 
 */
export class CoursesApi extends runtime.BaseAPI {

    /**
     * Create a course
     */
    async createCoursesRaw(requestParameters: CreateCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseResponse>> {
        if (requestParameters['courseCreate'] == null) {
            throw new runtime.RequiredError(
                'courseCreate',
                'Required parameter "courseCreate" was null or undefined when calling createCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseCreateToJSON(requestParameters['courseCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseResponseFromJSON(jsonValue));
    }

    /**
     * Create a course
     */
    async createCourses(requestParameters: CreateCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseResponse> {
        const response = await this.createCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a course
     */
    async deleteCourseRaw(requestParameters: DeleteCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['courseId'] == null) {
            throw new runtime.RequiredError(
                'courseId',
                'Required parameter "courseId" was null or undefined when calling deleteCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/courses/{course_id}`.replace(`{${"course_id"}}`, encodeURIComponent(String(requestParameters['courseId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a course
     */
    async deleteCourse(requestParameters: DeleteCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCourseRaw(requestParameters, initOverrides);
    }

    /**
     * Get a course
     */
    async getCourseRaw(requestParameters: GetCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseResponse>> {
        if (requestParameters['courseId'] == null) {
            throw new runtime.RequiredError(
                'courseId',
                'Required parameter "courseId" was null or undefined when calling getCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/courses/{course_id}`.replace(`{${"course_id"}}`, encodeURIComponent(String(requestParameters['courseId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseResponseFromJSON(jsonValue));
    }

    /**
     * Get a course
     */
    async getCourse(requestParameters: GetCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseResponse> {
        const response = await this.getCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all courses
     */
    async getCoursesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CourseResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/courses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CourseResponseFromJSON));
    }

    /**
     * Get all courses
     */
    async getCourses(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CourseResponse>> {
        const response = await this.getCoursesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a course
     */
    async updateCourseRaw(requestParameters: UpdateCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseResponse>> {
        if (requestParameters['courseId'] == null) {
            throw new runtime.RequiredError(
                'courseId',
                'Required parameter "courseId" was null or undefined when calling updateCourse().'
            );
        }

        if (requestParameters['courseUpdate'] == null) {
            throw new runtime.RequiredError(
                'courseUpdate',
                'Required parameter "courseUpdate" was null or undefined when calling updateCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/courses/{course_id}`.replace(`{${"course_id"}}`, encodeURIComponent(String(requestParameters['courseId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CourseUpdateToJSON(requestParameters['courseUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseResponseFromJSON(jsonValue));
    }

    /**
     * Update a course
     */
    async updateCourse(requestParameters: UpdateCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseResponse> {
        const response = await this.updateCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
