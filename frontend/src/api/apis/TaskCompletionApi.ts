/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  TaskCompletionCreate,
  TaskCompletionResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TaskCompletionCreateFromJSON,
    TaskCompletionCreateToJSON,
    TaskCompletionResponseFromJSON,
    TaskCompletionResponseToJSON,
} from '../models/index';

export interface CreateTaskCompletionRequest {
    taskCompletionCreate: TaskCompletionCreate;
}

export interface DeleteTaskCompletionRequest {
    taskCompletionId: number;
}

export interface GetTaskCompletionRequest {
    taskCompletionId: number;
}

export interface UpdateTaskCompletionRequest {
    taskCompletionId: number;
    taskCompletionCreate: TaskCompletionCreate;
}

/**
 * 
 */
export class TaskCompletionApi extends runtime.BaseAPI {

    /**
     * Create a task_completion
     */
    async createTaskCompletionRaw(requestParameters: CreateTaskCompletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskCompletionResponse>> {
        if (requestParameters['taskCompletionCreate'] == null) {
            throw new runtime.RequiredError(
                'taskCompletionCreate',
                'Required parameter "taskCompletionCreate" was null or undefined when calling createTaskCompletion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/task_completion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskCompletionCreateToJSON(requestParameters['taskCompletionCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskCompletionResponseFromJSON(jsonValue));
    }

    /**
     * Create a task_completion
     */
    async createTaskCompletion(requestParameters: CreateTaskCompletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskCompletionResponse> {
        const response = await this.createTaskCompletionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a task_completion
     */
    async deleteTaskCompletionRaw(requestParameters: DeleteTaskCompletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskCompletionId'] == null) {
            throw new runtime.RequiredError(
                'taskCompletionId',
                'Required parameter "taskCompletionId" was null or undefined when calling deleteTaskCompletion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/task_completion/{task_completion_id}`.replace(`{${"task_completion_id"}}`, encodeURIComponent(String(requestParameters['taskCompletionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a task_completion
     */
    async deleteTaskCompletion(requestParameters: DeleteTaskCompletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTaskCompletionRaw(requestParameters, initOverrides);
    }

    /**
     * Get a task_completion
     */
    async getTaskCompletionRaw(requestParameters: GetTaskCompletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskCompletionResponse>> {
        if (requestParameters['taskCompletionId'] == null) {
            throw new runtime.RequiredError(
                'taskCompletionId',
                'Required parameter "taskCompletionId" was null or undefined when calling getTaskCompletion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/task_completion/{task_completion_id}`.replace(`{${"task_completion_id"}}`, encodeURIComponent(String(requestParameters['taskCompletionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskCompletionResponseFromJSON(jsonValue));
    }

    /**
     * Get a task_completion
     */
    async getTaskCompletion(requestParameters: GetTaskCompletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskCompletionResponse> {
        const response = await this.getTaskCompletionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all task_completions
     */
    async getTaskCompletionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaskCompletionResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/task_completion`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskCompletionResponseFromJSON));
    }

    /**
     * Get all task_completions
     */
    async getTaskCompletions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaskCompletionResponse>> {
        const response = await this.getTaskCompletionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a task_completion
     */
    async updateTaskCompletionRaw(requestParameters: UpdateTaskCompletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskCompletionResponse>> {
        if (requestParameters['taskCompletionId'] == null) {
            throw new runtime.RequiredError(
                'taskCompletionId',
                'Required parameter "taskCompletionId" was null or undefined when calling updateTaskCompletion().'
            );
        }

        if (requestParameters['taskCompletionCreate'] == null) {
            throw new runtime.RequiredError(
                'taskCompletionCreate',
                'Required parameter "taskCompletionCreate" was null or undefined when calling updateTaskCompletion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/task_completion/{task_completion_id}`.replace(`{${"task_completion_id"}}`, encodeURIComponent(String(requestParameters['taskCompletionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskCompletionCreateToJSON(requestParameters['taskCompletionCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskCompletionResponseFromJSON(jsonValue));
    }

    /**
     * Update a task_completion
     */
    async updateTaskCompletion(requestParameters: UpdateTaskCompletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskCompletionResponse> {
        const response = await this.updateTaskCompletionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
