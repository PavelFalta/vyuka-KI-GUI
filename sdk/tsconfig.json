{
  "compilerOptions": {
    /* Base Options: */
    "esModuleInterop": true,            /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "skipLibCheck": true,               /* Skip type checking all .d.ts files. */
    "target": "ES2016",                 /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "allowJs": true,                    /* Allow JavaScript files to be a part of your program. Use this to migrate existing JavaScript code incrementally. */
    "resolveJsonModule": true,        /* Enable importing .json files. */
    "moduleDetection": "force",         /* Control what method is used to detect module-format JS files. */

    /* Strict Type Checking Options: */
    "strict": true,                     /* Enable all strict type-checking options. */
    // "noImplicitAny": true,            /* Enable error reporting for expressions and declarations with an implied 'any' type. */

    /* Module Resolution Options: */
    "module": "CommonJS",               /* Specify what module code is generated. "CommonJS" is typical for Node.js */
    "moduleResolution": "node",         /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": ".",                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                     /* Specify a set of entries that re-map imports to additional lookup locations. */

    /* Source Map Options: */
    // "sourceMap": true,               /* Create source map files for emitted JavaScript files. */
    "outDir": "./dist",                 /* Specify an output folder for all emitted files. */

    /* Interop Constraints */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */

    /* Type Checking */
    // "noUnusedLocals": true,           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,       /* Raise an error when a function parameter isn't read. */
    // "noImplicitReturns": true,        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true, /* Enable error reporting for fallthrough cases in switch statements. */

  },
  "include": ["./**/*.ts"],
  "exclude": ["node_modules", "**/*.spec.ts", "dist"]
} 